#+title: Guide for this project
#+author: Shuvrojit Biswas

This is going to be a simple auth project using express and mongodb.

* Introduction

We're going to use the yarn package manager.
Init the repository with git init and  yarn init. Make src diretory.
It will be typescript project. So be sure to install all types packages.
#+begin_src shell
# Install dev dependencies
yarn add typescript @types/node ts-node nodemon --save-dev
# Init tsc config
yarn tsc --init

#+end_src

Add a script command to the package.json file so that we can start coding in ts with auto restarting the server.

#+begin_src json
"scripts": {
    "dev": "nodemon src/index.ts"
}
#+end_src

Let's run our server to test the setup ~npm run dev~.


Let's add formating, linting and testing. This will be a TDD approach.

Add prettier and eslint for formating and linting.

#+begin_src shell
yarn add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint prettier
#+end_src

#+begin_src shell
yarn init @eslint/config
#+end_src

Add prettier and eslint script

#+begin_src json
"format": "prettier --write \"src/**/*.{ts, tsx}\""
"lint": "eslint . --ext .ts"
#+end_src

Install express and types express

#+begin_src shell
yarn add express @types/express
#+end_src


Then create a server.ts file with these content.

#+begin_src typescript
import express, {Express} from "express"

const app: Express  = express()

export default app

#+end_src

Then add these in the index file

#+begin_src typescript
import app from "./server"

const PORT: number = 8000 || process.env.PORT

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT} ...`)
})
#+end_src

Then run the server with
#+begin_src shell
yarn run dev
#+end_src


When adding .env file be sure to use dotenv package.
#+begin_src shell
yarn add dotenv
#+end_src

#+begin_src typescript
import dotenv
dotenv.config()
#+end_src

dotenv will have string as input. For getting types from dotenv into your typescript project. use ~import "dotenv/config"~ at the top of your file.

typescript non null assertion operator !. Which means the variable will not be undefined.

It took me a long time to fix this problem but define the mongouri carefully. It's the main culprit.


* Testing
Time to add testing to our project. Install supertest and jest with their @types.

install ts-jest and init it within proejct.


If you get module error use ts-jest as preset . Search for jest for typescript.

Without the body parser we can't access req.body features.
If you want to parse json data you need to specify it.
bodyparser.json()
bodyparser.urlencoded({extended:true})

app cors

* Mongodb

#+begin_src js

#+end_src

typescript error if expression expected somewhere near export default and connst . Declare const and declare that export in a separate line.
